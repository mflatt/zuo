#lang zuo
(require "image.zuo"
         "compile.zuo")

(define config (cond
                 [(file-exists? "Makefile") (config-file->hash "Makefile")]
                 ;; no `configure`-generated `Makefile`, so use defaults
                 [(eq? (hash-ref (runtime-env) 'system-type) 'unix)
                  (hash 'srcdir "."
                        'INSTALL_PREFIX "/usr/local"
                        'CC "cc"
                        'CFLAGS "-O2")]
                 [else
                  (hash 'srcdir "."
                        'INSTALL_PREFIX "C:\\Program Files\\Zuo"
                        'CC "cl.exe"
                        'CFLAGS "/O2")]))

(define srcdir (hash-ref config 'srcdir))
(define install-prefix (hash-ref config 'INSTALL_PREFIX))

(define (targets at-dir)
  (define image_zuo.c
    (target (at-dir "image_zuo.c")
            (lambda (self token)
              (embed-image (hash 'output (target-name self)
                                 'deps "image_zuo.dep"
                                 'libs (map string->symbol (string-split (hash-ref config 'EMBED_LIBS "zuo")))
                                 'keep-collects? #t))
              (rule '() (file-sha1 (target-name self) token)))))

  (define (exe-target name lib-path)
    (target (at-dir name)
            (lambda (self token)
              (rule (list image_zuo.c)
                    (file-sha1 (target-name self) token)
                    (lambda ()
                      (define l (split-path (target-name self)))
                      (when (car l) (mkdir* (car l)))
                      (compile-c (target-name self)
                                 (target-name image_zuo.c)
                                 (list (~a "-DZUO_LIB_PATH=\"" lib-path "\""))
                                 config
                                 thread-process-wait)
                      (file-sha1 (target-name self) token))))
            (hash 'noisy? #t)))
  
  (define (add-exe name)
    (if (eq? (hash-ref (runtime-env) 'system-type) 'windows)
        (~a name ".exe")
        name))

  (define zuo-to-run (exe-target (add-exe "to-run/zuo") (build-path srcdir ".." "lib")))
  (define zuo-to-install (exe-target (add-exe "to-install/zuo") (~a install-prefix "/lib")))
  
  (define zuos-to-run-and-install
    (target (at-dir "zuos-to-run-and-install")
            (lambda (self token)
              (rule (list zuo-to-run zuo-to-install)
                    phony-sha1
                    (lambda ()
                      phony-sha1)))))

  (define install
    (target (at-dir "install")
            (lambda (self token)
              (rule (list zuo-to-run)
                    phony-sha1
                    (lambda ()
                      (define (say-copy cp a b)
                        (displayln (~a "copying " a " to " b))
                        (cp a b))
                      (mkdir* install-prefix)
                      (mkdir* (build-path install-prefix "bin"))
                      (say-copy cp (target-name zuo-to-install) (build-path install-prefix "bin" "zuo"))
                      (mkdir* (build-path install-prefix "lib"))
                      (say-copy cp*
                                (build-path srcdir "lib" "zuo")
                                (build-path install-prefix "lib" "zuo"))
                      phony-sha1)))))

  (list zuos-to-run-and-install
        image_zuo.c
        zuo-to-run
        zuo-to-install
        install))

(provide-targets targets)
