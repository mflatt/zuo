#lang zuo
(require "image.zuo"
         "compile.zuo")

(define config (cond
                 [(file-exists? "Makefile") (config-file->hash "Makefile")]
                 ;; no `configure`-generated `Makefile`, so use defaults
                 [(eq? (hash-ref (runtime-env) 'system-type) 'unix)
                  (hash 'srcdir "."
                        'INSTALL_PREFIX "/usr/local"
                        'CC "cc"
                        'CFLAGS "-O2")]
                 [else
                  (hash 'srcdir "."
                        'INSTALL_PREFIX "C:\\Program Files\\Zuo"
                        'CC "cl.exe"
                        'CFLAGS "/O2")]))

(define srcdir (hash-ref config 'srcdir))
(define install-prefix (hash-ref config 'INSTALL_PREFIX))

(define here (input-file-target (quote-module-path)))

(define image_zuo.c
  (target "image_zuo.c"
          (lambda (name state)
            (embed-image (hash 'output name
                               'deps "image_zuo.dep"
                               'libs (map string->symbol (string-split (hash-ref config 'EMBED_LIBS "zuo")))
                               'keep-collects? #t))
            (rule '() (file-sha1 name state)))))

(define (exe-target name lib-path)
  (target name
          (lambda (name state)
            (rule (list image_zuo.c)
                  (file-sha1 name state)
                  (lambda (state)
                    (define l (split-path name))
                    (when (car l) (mkdir* (car l)))
                    (compile-c name
                               (target-path image_zuo.c state)
                               (list (~a "-DZUO_LIB_PATH=\"" lib-path "\""))
                               config
                               thread-process-wait)
                    (file-sha1 name state))))
          (hash 'noisy? #t)))

(define (add-exe name)
  (if (eq? (hash-ref (runtime-env) 'system-type) 'windows)
      (~a name ".exe")
      name))

(define zuo-to-run (exe-target (add-exe "to-run/zuo") (build-path srcdir ".." "lib")))
(define zuo-to-install (exe-target (add-exe "to-install/zuo") (~a install-prefix "/lib")))

(define zuos-to-run-and-install
  (target "zuos-to-run-and-install"
          (lambda (name state)
            (rule (list zuo-to-run zuo-to-install)
                  done-sha1
                  #f))))

(define install
  (target "install"
          (lambda (name state)
            (rule (list zuo-to-run)
                  'before
                  (lambda (state)
                    (define (say-copy cp a b)
                      (displayln (~a "copying " a " to " b))
                      (cp a b))
                    (mkdir* install-prefix)
                    (mkdir* (build-path install-prefix "bin"))
                    (say-copy cp (target-path zuo-to-install state) (build-path install-prefix "bin" "zuo"))
                    (mkdir* (build-path install-prefix "lib"))
                    (say-copy cp*
                              (build-path srcdir "lib" "zuo")
                              (build-path install-prefix "lib" "zuo"))
                    done-sha1)))))

(provide-builder (list zuos-to-run-and-install
                       image_zuo.c
                       zuo-to-run
                       zuo-to-install
                       install))
