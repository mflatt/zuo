#lang zuo

(define (current-program) "embed-lib.zuo")

(define (need-arg args)
  (when (null? (cdr args))
    (error (~a (current-program) ": flag " (car args) " needs an argument"))))

(define cmd
  (let loop ([args (hash-ref (runtime-env) 'args #f)] [cmd (hash)])
    (cond
      [(null? args) cmd]
      [(string=? (car args) "-o")
       (need-arg args)
       (loop (cddr args) (hash-set cmd 'output (cadr args)))]
      [(or (string=? (car args) "+l") (string=? (car args) "++lib"))
       (need-arg args)
       (loop (cddr args) (hash-set cmd 'libs (cons (cadr args)
                                                   (hash-ref cmd 'libs '()))))]
      [(string=? (car args) "--keep-collects")
       (loop (cdr args) (hash-set cmd 'keep-collects? #t))]
      [else
       (error (~a (current-program) ": unrecognized argument " (car args)))])))

(define given-libs (hash-ref cmd 'libs '()))
(define libs (if (null? given-libs)
                 '(zuo)
                 given-libs))

(define heap
  (let ([ht (process (hash-ref (runtime-env) 'exe #f) "" (hash 'stdin 'pipe 'stdout 'pipe))])
    (define p (hash-ref ht 'process #f))
    (define in (hash-ref ht 'stdin #f))
    (define out (hash-ref ht 'stdout #f))
    (fd-write in "#lang zuo/kernel\n")
    (fd-write in "(begin\n")
    (for-each (lambda (lib)
                (fd-write in (~a "(module->hash '" lib ")\n")))
              libs)
    (fd-write in "(dump-heap-and-exit (fd-open-output 'stdout)))\n")
    (fd-close in)
    (let ([heap (fd-read out eof)])
      (fd-close out)
      (process-wait p)
      (unless (= 0 (process-status p))
        (error "heap dump failed"))
      heap)))

(define out-file (hash-ref cmd 'output #f))

(define zuo.c (fd-read (fd-open-input "zuo.c") eof))
(define out (fd-open-output (or out-file 'stdout)))

(define lines
  (let loop ([start 0] [i 0])
    (cond
      [(= i (string-length zuo.c))
       (if (= start i)
           '()
           (list (substring zuo.c start i)))]
      [(= (string-ref zuo.c i) (char "\n"))
       (cons (substring zuo.c start i)
             (loop (+ i 1) (+ i 1)))]
      [else (loop start (+ i 1))])))

(define (~hex v)
  (if (= v 0)
      "0"
      (let loop ([v v] [accum '()])
        (if (= v 0)
            (apply ~a accum)
            (loop (quotient v 16)
                  (cons (let ([i (bitwise-and v 15)])
                          (substring "0123456789abcdef" i (+ i 1)))
                        accum))))))

(for-each
 (lambda (line)
   (cond
     [(string=? line "#define EMBEDDED_BOOT_HEAP 0")
      (unless (hash-ref cmd 'keep-collects? #f)
        (fd-write out (~a "#define ZUO_LIB_PATH NULL\n")))
      (fd-write out (~a "#define EMBEDDED_BOOT_HEAP 1\n"))
      (fd-write out (~a "static zuo_uint32_t emedded_boot_heap_len = "
                        (quotient (string-length heap) 4)
                        ";\n"))
      (fd-write out (~a "static zuo_uint32_t emedded_boot_heap[] = {\n"))
      (let ([accum->line (lambda (accum) (apply ~a (reverse (cons "\n" accum))))])
        (let loop ([i 0] [col 0] [accum '()])
          (cond
            [(= i (string-length heap))
             (unless (null? accum)
               (fd-write out (accum->line accum)))]
            [(= col 8)
             (fd-write out (accum->line accum))
             (loop i 0 '())]
            [else
             (loop (+ i 4) (+ col 1)
                   (cons (~a " 0x" (~hex (string-u32-ref heap i)) ",")
                         accum))])))
      (fd-write out (~a " 0 };\n"))]
     [else
      (fd-write out (~a line "\n"))]))
 lines)

