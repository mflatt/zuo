#lang zuo

(define (check* e a b)
  (unless (equal? a b)
    (error (~a "failed: "
               (~s e)
               "\n  result: " (~v a)
               "\n  result: " (~v b)))))

(define-syntax (check stx)
  (unless (list? stx) (bad-syntax stx))
  (list* (quote-syntax check*)
         (list (quote-syntax quote) stx)
         (let ([len (length (cdr stx))])
           (cond
             [(= 1 len) (cons #t (cdr stx))]
             [(= 2 len) (cdr stx)]
             [else (bad-syntax stx)]))))

(define (check-fail* e msg)
  (define p (process (hash-ref (runtime-env) 'exe #f)
                     ""
                     (hash 'stdin 'pipe 'stdout 'pipe 'stderr 'pipe)))
  (fd-write (ref p 'stdin) (~a "#lang zuo " (~s e)))
  (fd-close (ref p 'stdin))
  (define out (fd-read (ref p 'stdout) eof))
  (define err (fd-read (ref p 'stderr) eof))
  (fd-close (ref p 'stdout))
  (fd-close (ref p 'stderr))
  (process-wait (ref p 'process))
  (when (= 0 (process-status (ref p 'process)))
    (error (~a "check-fail: failed to fail: " (~s e)
               "\n  stdout: " (~s out)
               "\n  stderr: " (~s err))))
  (let loop ([i 0])
    (when (> i (- (string-length err) (string-length msg)))
      (error (~a "check-fail: didn't find expected message: " (~s e)
                 "\n  expected: " msg
                 "\n  stderr: " (~s err))))
    (unless (string=? (substring err i (+ i (string-length msg))) msg)
      (loop (+ i 1)))))

(define-syntax (check-fail stx)
  (unless (and (list? stx) (= 3 (length stx))) (bad-syntax stx))
  (list (quote-syntax check-fail*)
        (list (quote-syntax quote) (cadr stx))
        (cadr (cdr stx))))

;; Some common error messages
(define arity "wrong argument count")

;; We need certain things to work for checking even to work, but all
;; we can do is assume that things work...

(alert "equal") 

(check #t)
(check (not #f))
(check (eq? 'apple 'apple))
(check (not (eq? 'apple 'banana)))
(check (not (eq? 'apple "apple")))

(check (string=? "apple" "apple"))
(check (not (string=? "apple" "banana")))

(check (= 1 1))
(check (not (= 1 -1)))

(check (equal? 1 1))
(check (equal? "apple" "apple"))

(check (equal? "apple" "apple"))
(check (equal? '("apple") '("apple")))
(check (equal? '(0 "apple") '(0 "apple")))
(check (not (equal? '("apple") '("banana"))))
(check (not (equal? '(0 "apple") '(0 "banana"))))

(check (equal? (hash 'a 1) (hash 'a 1)))
(check (not (equal? (hash 'a 1) (hash 'b 1))))
(check (not (equal? (hash 'a 1) (hash 'a 2))))

(check (not (equal? "apple" 'other)))
(check (not (equal? 'other "apple")))
(check (not (equal? 1 'other)))
(check (not (equal? 'other 1)))
(check (not (equal? 1 (hash 'a 1))))
(check (not (equal? (hash 'a 1) 1)))

(check-fail (= 1 'apple) "not an integer")
(check-fail (= 'apple 1) "not an integer")
(check-fail (string=? 1 'apple) "not a string")
(check-fail (string=? 'apple 1) "not a string")

(alert "arithmetic")

(check (+ 1 2) 3)
(check (+ 1 -2) -1)
(check (+ 1 2 3 4) 10)
(check (+) 0)
(check (+ 1) 1)
(check (+ 4294967296 1) 4294967297)
(check (+ -4294967296 1) -4294967295)
(check (+ 4294967296 1) 4294967297)
(check (+ -9223372036854775808 1) -9223372036854775807)
(check (- -9223372036854775808 1) 9223372036854775807)
(check (+ 9223372036854775807 1) -9223372036854775808)
(check-fail (+ 1 'apple) "not an integer")
       
(check (- 2 1) 1)
(check (- 2 -1) 3)
(check (- 1 2 3 4) -8)
(check (- 1) -1)
(check (- 0) 0)
(check (- -9223372036854775808) -9223372036854775808)
(check (- -9223372036854775807) 9223372036854775807)
(check-fail (-) arity)
(check-fail (- 1 'apple) "not an integer")

(check (* 10 2) 20)
(check (* 10 -2) -20)
(check (* 1 2 3 4) 24)
(check (*) 1)
(check (* 10) 10)
(check (* 10 0) 0)
(check (* 4294967296 4294967296) 0)
(check (* 4294967296 -4294967296) 0)
(check (* 4294967296 4294967297) 4294967296)
(check (* 4294967296 -4294967297) -4294967296)
(check (* 2147483648 4294967296) -9223372036854775808)
(check (* -9223372036854775808 1) -9223372036854775808)
(check (* -9223372036854775808 -1) -9223372036854775808)
(check (* 9223372036854775807 -1) -9223372036854775807)
(check (* -9223372036854775807 -1) 9223372036854775807)
(check-fail (* 1 'apple) "not an integer")

(check (quotient 5 2) 2)
(check (quotient 1 2) 0)
(check (quotient -5 2) -2)
(check (quotient 5 -2) -2)
(check (quotient -9223372036854775808 4294967296) -2147483648)
(check (quotient -9223372036854775808 1) -9223372036854775808)
(check (quotient -9223372036854775808 -1) -9223372036854775808)
(check (quotient 9223372036854775807 -1) -9223372036854775807)
(check (quotient -9223372036854775807 -1) 9223372036854775807)
(check-fail (quotient -5) arity)
(check-fail (quotient 5 'apple) "not an integer")
(check-fail (quotient 5 0) "divide by zero")

(check (modulo 5 2) 1)
(check (modulo 2 2) 0)
(check (modulo -5 2) -1)
(check (modulo 5 -2) 1)
(check (modulo -9223372036854775808 1) 0)
(check (modulo -9223372036854775808 -1) 0)
(check (modulo 9223372036854775807 -1) 0)
(check (modulo -9223372036854775807 -1) 0)
(check (modulo -9223372036854775808 9223372036854775807) -1)
(check (modulo 9223372036854775807 -9223372036854775808) 9223372036854775807)
(check-fail (modulo -5) arity)
(check-fail (modulo 5 'apple) "not an integer")
(check-fail (modulo 5 0) "divide by zero")

(alert "ordering")

(check (= 1 1))
(check (= -9223372036854775808 -9223372036854775808))

(check (<= 1 1))
(check (<= 1 2))
(check (<= -2 -1))
(check (not (<= -1 -2)))
(check (<= -9223372036854775808 -9223372036854775808))
(check (<= -9223372036854775808 9223372036854775807))
(check (not (<= 9223372036854775807 -9223372036854775808)))

(check (not (< 1 1)))
(check (< 1 2))
(check (< -2 -1))
(check (not (< -1 -2)))
(check (not (< -9223372036854775808 -9223372036854775808)))
(check (< -9223372036854775808 9223372036854775807))
(check (not (< 9223372036854775807 -9223372036854775808)))

(check (not (> 1 1)))
(check (> 2 1))
(check (> -1 -2))
(check (not (> -2 -1)))
(check (not (> -9223372036854775808 -9223372036854775808)))
(check (> 9223372036854775807 -9223372036854775808))
(check (not (> -9223372036854775808 9223372036854775807)))

(check (>= 1 1))
(check (>= 2 1))
(check (>= -1 -2))
(check (not (>= -2 -1)))
(check (>= -9223372036854775808 -9223372036854775808))
(check (>= 9223372036854775807 -9223372036854775808))
(check (not (>= -9223372036854775808 9223372036854775807)))

(alert "tests passed")
