#lang zuo

(require "harness.zuo")

(alert "paths")

(check (path-string? "x"))
(check (path-string? "") #f)
(check (path-string? "xy\x00z") #f)
(check (path-string? 'apple) #f)

(define unix? (eq? (hash-ref (runtime-env) 'system-type) 'unix))

(check (build-path "x" "y") (if unix? "x/y" "x\\y"))
(check (build-path "." "y") (if unix? "./y" ".\\y"))
(check (build-path ".." "y") (if unix? "../y" "..\\y"))
(check (build-path "x" ".") (if unix? "x/." "x\\."))
(check (build-path "x" "..") (if unix? "x/.." "x\\.."))
(check (build-path "x/" "y") (if unix? "x/y" "x/y"))
(check (build-path "x//" "y") (if unix? "x//y" "x//y"))
(check (build-path "x\\" "y") (if unix? "x\\/y" "x\\y"))
(check (build-path "x" "y/z") (if unix? "x/y/z" "x\\y/z"))
(check (build-path "x/y" "z") (if unix? "x/y/z" "x/y\\z"))
(check (build-path "x/y/" "z") (if unix? "x/y/z" "x/y/z"))
(check (build-path "/x" "z") (if unix? "/x/z" "/x\\z"))
(check-fail (build-path "" "z") "not a path string")
(check-fail (build-path "z" "") "not a path string")
(check-fail (build-path 0 "z") "not a path string")
(check-fail (build-path "z" 0) "not a path string")
(check-fail (build-path "z" "/x") "path is not relative")

(check (build-path "x") "x")
(check (build-path "x" "y" "z") (if unix? "x/y/z" "x\\y\\z"))

(check (split-path "x/y") '("x/" . "y"))
(check (split-path "x/y/") '("x/" . "y"))
(check (split-path "x//y/") '("x//" . "y"))
(check (split-path "x/y///") '("x/" . "y"))
(check (split-path "x") '(#f . "x"))
(check (split-path "x/") '(#f . "x"))
(check (split-path "x//") '(#f . "x"))
(check (split-path "x\\y") (if unix? '(#f . "x\\y") '("x\\" . "y")))
(check (split-path "/") '(#f . "/"))
(check-fail (split-path "") "not a path string")
(check-fail (split-path 0) "not a path string")

(check (relative-path? "x/y"))
(check (relative-path? "x/y/"))
(check (relative-path? "/x/") #f)
(check (relative-path? "/") #f)
(check (relative-path? "\\x") unix?)
(check-fail (relative-path? "") "not a path string")
(check-fail (relative-path? 0) "not a path string")

(check (path-string? (quote-path "adjacent.txt")))
(check (not (relative-path? (quote-path "adjacent.txt"))))
(check-fail (quote-path) bad-stx)
(check-fail (quote-path x) bad-stx)
(check-fail (quote-path ,(quote-module-path)) bad-stx)
(check-fail (quote-path . x) bad-stx)
(check-fail (quote-path "adjacent.txt" c) bad-stx)

(check (simple-form-path "a//b//c/d/../f/g")
       (if unix?
           "a/b/c/f/g"
           "a\\b\\c\\f\\g"))
(check (simple-form-path "a//b//c/d/.././../f/g")
       (if unix?
           "a/b/f/g"
           "a\\b\\f\\g"))
(check (simple-form-path "../../a//b//c/d")
       (if unix?
           "../../a/b/c/d"
           "..\\..\\a\\b\\c\\d"))

(check (find-relative-path "home/zuo/src" "home/zuo/src/private/optimize")
       (build-path "private" "optimize"))
(check (find-relative-path "home/zuo/src" "home/zuo/lib")
       (build-path ".." "lib"))
(check (find-relative-path "home/zuo/src" "home/zuo/src")
       #f)
(check (find-relative-path "home/zuo/src" "tmp/cache")
       (build-path "tmp" "cache"))
(check-fail (find-relative-path "/home/zuo/src" "tmp/cache")
            "both relative or both absolute")

(when unix?
  (check (find-relative-path "/home/zuo/src" "/home/zuo/src/private/optimize")
         "private/optimize")
  (check (find-relative-path "/home/zuo/src" "/home/zuo/lib")
         "../lib")
  (check (find-relative-path "/home/zuo/src" "/home/zuo/src")
         #f)
  (check (find-relative-path "/home/zuo/src" "/tmp/cache")
         "../../../tmp/cache"))
