#lang zuo/private/macromod

(require "stx.zuo"
         "syntax-error.zuo")

(provide or
         and
         cond else
         when
         unless)

(define-syntax or
  (lambda (stx)
    (if (stx-list? stx)
        (if (null? (stx-cdr stx))
            #t
            (if (null? (stx-cddr stx))
                (stx-cadr stx)
                (list 'let (list (list 'tmp (stx-cadr stx)))
                      (list 'if 'tmp
                            'tmp
                            (cons 'or (stx-cddr stx))))))
        (bad-syntax stx))))

(define-syntax and
  (lambda (stx)
    (if (stx-list? stx)
        (if (null? (stx-cdr stx))
            #t
            (if (null? (stx-cddr stx))
                (stx-cadr stx)
                (list 'if (stx-cadr stx)
                      (cons 'and (stx-cddr stx))
                      #f)))
        (bad-syntax stx))))

(define-syntax else
  (lambda (stx)
    (misplaced-syntax stx)))

(define-syntax cond
  (lambda (stx free-id=?)
    (if (and (stx-list? stx)
             (stx-pair? (stx-cdr stx))
             (letrec ([ok-clauses?
                       (lambda (l)
                         (or (null? l)
                             (let ([cl (stx-car l)])
                               (and (stx-list? cl)
                                    (>= (stx-length cl) 2)
                                    (ok-clauses? (stx-cdr l))))))])
               (ok-clauses? (stx-cdr stx))))
        (let ([cl1 (stx-cadr stx)]
              [cls (stx-cddr stx)])
          (list 'if (if (and (null? cls)
                             (identifier? (stx-car cl1))
                             (free-id=? (quote-syntax else) (stx-car cl1)))
                        #t
                        (stx-car cl1))
                (cons 'begin (stx-cdr cl1))
                (if (null? cls)
                    '(void)
                    (cons 'cond cls))))
        (bad-syntax stx))))

(define-syntax when
  (lambda (stx)
    (if (and (stx-list? stx)
             (>= (stx-length stx) 3))
        (list 'if (stx-cadr stx)
              (cons 'begin (stx-cddr stx))
              '(void))
        (bad-syntax stx))))

(define-syntax unless
  (lambda (stx)
    (if (and (stx-list? stx)
             (>= (stx-length stx) 3))
        (list 'if (stx-cadr stx)
              '(void)
              (cons 'begin (stx-cddr stx)))
        (bad-syntax stx))))
