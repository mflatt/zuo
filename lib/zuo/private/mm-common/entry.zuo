#lang zuo/datum

;; The `read-and-eval` entry point for a language using the expander

(define (make-read-and-eval make-initial-state)
  (lambda (str start mod-path)
    (let* ([es (read-from-string-all str start)]
           [ctx (make-module-context mod-path)]
           [es (map (lambda (e) (datum->syntax ctx e)) es)]
           [parse (make-parse ctx mod-path)]
           [initial-state (make-initial-state ctx)]
           [initial-provides '()]
           [es+state+provides (expand-sequence es initial-state initial-provides mod-path ctx parse)]
           [es (car es+state+provides)]
           [state (cadr es+state+provides)]
           [provides (cadr (cdr es+state+provides))]
           [outs (resolve-provides provides state ctx mod-path)]
           [print-result (lambda (v)
                           (unless (eq? v (void))
                             (alert (~v v))))]
           [add-print (lambda (s) (list print-result s))])
      (eval (cons 'begin (cons '(void) (map (lambda (e) (add-print (parse e state))) es))))
      (hash 'macromod-provides outs
            merge-bindings-export-key (make-export-merge-binds ctx (state-binds state))))))

(hash
 ;; makes `#lang zuo/private/macromod work:
 'read-and-eval (make-read-and-eval (lambda (ctx)
                                      (make-state (binds-create top-provides ctx)
                                                  (initial-nominals language-mod-path top-provides))))
 ;; makes `(require zuo/private/macromod)` work:
 'macromod-provides top-provides
 ;; for making a new `#lang` with some initial imports:
 'make-read-and-eval-with-initial-imports-from
 (lambda (mod-path)
   (let* ([mod (dynamic-require mod-path)]
          [provides (hash-ref mod 'macromod-provides #f)]
          [m-binds (hash-ref mod merge-bindings-export-key #f)])
     (unless provides 
       (syntax-error "not a compatible module for initial imports" mod-path))
     (make-read-and-eval
      (lambda (ctx)
        (make-state (merge-binds* (binds-create provides ctx) m-binds)
                    (initial-nominals mod-path provides)))))))
