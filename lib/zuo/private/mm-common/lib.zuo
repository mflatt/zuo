#lang zuo/datum

(define caar (lambda (p) (car (car p))))
(define cadr (lambda (p) (car (cdr p))))
(define cdar (lambda (p) (cdr (car p))))
(define cddr (lambda (p) (cdr (cdr p))))

(define show (lambda (v) (display (~a (~s v) "\n")))) ; debugging aid

(define map
  (letrec ([map (lambda (f vs)
                  (if (null? vs)
                      '()
                      (cons (f (car vs)) (map f (cdr vs)))))])
    map))

(define map2
  (letrec ([map2 (lambda (f vs v2s)
                   (if (null? vs)
                       '()
                       (cons (f (car vs) (car v2s))
                             (map2 f (cdr vs) (cdr v2s)))))])
    map2))

(define foldl
  (lambda (f init vs)
    (letrec ([fold (lambda (vs accum)
                     (if (null? vs)
                         accum
                         (fold (cdr vs) (f (car vs) accum))))])
      (fold vs init))))

(define ormap
  (lambda (f vs)
    (letrec ([ormap (lambda (vs)
                      (if (null? vs)
                          #f
                          (or (f (car vs)) (ormap (cdr vs)))))])
      (ormap vs))))

(define mod-path=?
  (lambda (a b) (if (or (symbol? a) (symbol? b))
                    (eq? a b)
                    (string=? a b))))

(define gensym
  (lambda (sym)
    (string->uninterned-symbol (symbol->string sym))))
