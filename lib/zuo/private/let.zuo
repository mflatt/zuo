#lang zuo/private/macromod

(require "stx.zuo"
         "and-or.zuo"
         "syntax-error.zuo"
         "list.zuo"
         "check-dups.zuo")

(provide (rename-out [let-or-named-let let])
         let*)

(define-syntax let-or-named-let
  (lambda (stx)
    (cond
      [(not (stx-pair? stx)) (bad-syntax stx)]
      [(and (stx-pair? (stx-cdr stx))
            (identifier? (stx-cadr stx)))
       ;; named `let`
       (unless (and (stx-list? stx)
                    (>= (stx-length stx) 4))
         (bad-syntax stx))
       (let ([name (stx-cadr stx)]
             [bindings (stx->list (stx-cadr (stx-cdr stx)))])
         (for-each (lambda (binding)
                     (unless (and (stx-list? binding)
                                  (= 2 (stx-length binding))
                                  (identifier? (stx-car binding)))
                       (syntax-error "named let: ill-formed binding" binding)))
                   bindings)
         (let ([args (map stx-car bindings)]
               [inits (map stx-cadr bindings)])
           (check-duplicates args)
           (cons (list 'letrec
                       (list (list name
                                   (list* 'lambda
                                          args
                                          (stx-cddr (stx-cdr stx)))))
                       name)
                 inits)))]
      [else (cons 'let (stx-cdr stx))])))

(define-syntax let*
  (lambda (stx)
    (unless (and (stx-list? stx) (>= (stx-length stx) 3))
      (bad-syntax stx))
    (let ([bindings (stx-cadr stx)])
      (for-each (lambda (binding)
                  (unless (and (stx-list? binding)
                               (= 2 (stx-length binding))
                               (identifier? (stx-car binding)))
                    (syntax-error "let*: ill-formed binding" binding)))
                (stx->list bindings))
      (letrec ([nest-bindings
                (lambda (bindings)
                  (if (null? bindings)
                      (cons 'begin (stx-cddr stx))
                      (list 'let (list (stx-car bindings))
                            (nest-bindings (stx-cdr bindings)))))])
        (nest-bindings bindings)))))

